--- ../src-base/minecraft/net/minecraft/util/Session.java
+++ ../src-work/minecraft/net/minecraft/util/Session.java
@@ -2,9 +2,14 @@
 
 import com.google.common.collect.Maps;
 import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.exceptions.AuthenticationException;
+import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.util.UUIDTypeAdapter;
 import java.util.Map;
 import java.util.UUID;
+
+import net.minecraft.client.Minecraft;
+import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
@@ -15,9 +20,24 @@
     private final String field_148257_b;
     private final String field_148258_c;
     private final Session.Type field_152429_d;
+    /** Forge: Cache of the local session's GameProfile properties. */
+    private com.mojang.authlib.properties.PropertyMap properties;
 
     public Session(String p_i1098_1_, String p_i1098_2_, String p_i1098_3_, String p_i1098_4_)
     {
+        if (p_i1098_1_ == null || p_i1098_1_.isEmpty())
+        {
+            p_i1098_1_ = "MissingName";
+            p_i1098_2_ = p_i1098_3_ = "NotValid";
+            FMLLog.getLogger().log(org.apache.logging.log4j.Level.WARN, "=========================================================");
+            FMLLog.getLogger().log(org.apache.logging.log4j.Level.WARN, "WARNING!! the username was not set for this session, typically");
+            FMLLog.getLogger().log(org.apache.logging.log4j.Level.WARN, "this means you installed Forge incorrectly. We have set your");
+            FMLLog.getLogger().log(org.apache.logging.log4j.Level.WARN, "name to \"MissingName\" and your session to nothing. Please");
+            FMLLog.getLogger().log(org.apache.logging.log4j.Level.WARN, "check your installation and post a console log from the launcher");
+            FMLLog.getLogger().log(org.apache.logging.log4j.Level.WARN, "when asking for help!");
+            FMLLog.getLogger().log(org.apache.logging.log4j.Level.WARN, "=========================================================");
+        }
+
         this.field_74286_b = p_i1098_1_;
         this.field_148257_b = p_i1098_2_;
         this.field_148258_c = p_i1098_3_;
@@ -26,7 +46,7 @@
 
     public String func_111286_b()
     {
-        return "token:" + this.field_148258_c + ":" + this.field_148257_b;
+        return "";
     }
 
     public String func_148255_b()
@@ -41,19 +61,31 @@
 
     public String func_148254_d()
     {
-        return this.field_148258_c;
+        return "";
     }
 
+    /**
+     * Safe method to use to login to a server
+     * Can be used for authentication in place of providing the token to {@link MinecraftSessionService#joinServer(GameProfile, String, String)}
+     * @param servername
+     * @throws AuthenticationException
+     */
+    public void loginToServer(String servername) throws AuthenticationException {
+        Minecraft.func_71410_x().func_152347_ac().joinServer(func_148256_e(), field_148258_c, servername);
+    }
+    
     public GameProfile func_148256_e()
     {
         try
         {
             UUID uuid = UUIDTypeAdapter.fromString(this.func_148255_b());
-            return new GameProfile(uuid, this.func_111285_a());
+            GameProfile ret = new GameProfile(uuid, this.func_111285_a());    //Forge: Adds cached GameProfile properties to returned GameProfile.
+            if (properties != null) ret.getProperties().putAll(properties); // Helps to cut down on calls to the session service,
+            return ret;                                                     // which helps to fix MC-52974.
         }
         catch (IllegalArgumentException var2)
         {
-            return new GameProfile((UUID)null, this.func_111285_a());
+            return new GameProfile(net.minecraft.entity.player.EntityPlayer.func_146094_a(new GameProfile((UUID)null, this.func_111285_a())), this.func_111285_a());
         }
     }
 
@@ -62,6 +94,19 @@
         return this.field_152429_d;
     }
 
+    /* ======================================== FORGE START ===================================== */
+    //For internal use only. Modders should never need to use this.
+    public void setProperties(com.mojang.authlib.properties.PropertyMap properties)
+    {
+        if(this.properties == null) this.properties = properties;
+    }
+
+    public boolean hasCachedProperties()
+    {
+        return properties != null;
+    }
+    /* ========================================= FORGE END ====================================== */
+
     @SideOnly(Side.CLIENT)
     public static enum Type
     {
